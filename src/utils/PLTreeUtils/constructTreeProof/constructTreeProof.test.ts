import constructTreeProof from "./constructTreeProof";

/**
 * ALL OF THE TESTS FAIL DUE
 * TO INCORRECT TYPE REGISTERAION OF THE NODES
 */
describe.skip("constructTreeProof", () => {
  it("test 1", () => {
    const expected = {
      absurdity: false,
      data: ["t", "->", "s"],
      left: null,
      middle: {
        absurdity: false,
        data: ["q", "->", "y"],
        left: null,
        middle: {
          absurdity: false,
          data: ["~", "(", "p", "->", "r", ")"],
          left: {
            absurdity: false,
            data: ["~t"],
            left: {
              absurdity: false,
              data: ["~q"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            middle: null,
            orderNumber: 4,
            originNumber: 1,
            primitive: true,
            right: {
              absurdity: false,
              data: ["y"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            unpacked: false,
          },
          middle: null,
          orderNumber: 3,
          originNumber: null,
          primitive: false,
          right: {
            absurdity: false,
            data: ["s"],
            left: {
              absurdity: false,
              data: ["~q"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            middle: null,
            orderNumber: 4,
            originNumber: 1,
            primitive: true,
            right: {
              absurdity: false,
              data: ["y"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            unpacked: false,
          },
          unpacked: true,
        },
        orderNumber: 2,
        originNumber: null,
        primitive: false,
        right: null,
        unpacked: true,
      },
      orderNumber: 1,
      originNumber: null,
      primitive: false,
      right: null,
      unpacked: true,
    };

    expect(constructTreeProof(["t -> s", "q -> y"], "p -> r")).toEqual(
      expected
    );
  });

  it("test 2", () => {
    const expected = {
      absurdity: false,
      data: ["p", "->", "q"],
      left: null,
      middle: {
        absurdity: false,
        data: ["q", "->", "r"],
        left: null,
        middle: {
          absurdity: false,
          data: ["~", "(", "p", "->", "r", ")"],
          left: {
            absurdity: false,
            data: ["~p"],
            left: {
              absurdity: false,
              data: ["~q"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: true,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            middle: null,
            orderNumber: 4,
            originNumber: 1,
            primitive: true,
            right: {
              absurdity: false,
              data: ["r"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: true,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            unpacked: false,
          },
          middle: null,
          orderNumber: 3,
          originNumber: null,
          primitive: false,
          right: {
            absurdity: false,
            data: ["q"],
            left: {
              absurdity: false,
              data: ["~q"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: true,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            middle: null,
            orderNumber: 4,
            originNumber: 1,
            primitive: true,
            right: {
              absurdity: false,
              data: ["r"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: true,
                  data: ["~r"],
                  left: null,
                  middle: null,
                  orderNumber: 6,
                  originNumber: 3,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            unpacked: false,
          },
          unpacked: true,
        },
        orderNumber: 2,
        originNumber: null,
        primitive: false,
        right: null,
        unpacked: true,
      },
      orderNumber: 1,
      originNumber: null,
      primitive: false,
      right: null,
      unpacked: true,
    };

    expect(constructTreeProof(["p -> q", "q -> r"], "p -> r")).toEqual(
      expected
    );
  });

  it("test 3", () => {
    const expected = {
      absurdity: false,
      data: ["(", "p", "&", "q", ")", "->", "r"],
      left: null,
      middle: {
        absurdity: false,
        data: [
          "~",
          "(",
          "(",
          "p",
          "->",
          "r",
          ")",
          "|",
          "(",
          "q",
          "->",
          "r",
          ")",
        ],
        left: {
          absurdity: false,
          data: ["~", "(", "p", "&", "q", ")"],
          left: null,
          middle: {
            absurdity: false,
            data: ["~", "(", "p", "->", "r", ")"],
            left: null,
            middle: {
              absurdity: false,
              data: ["~", "(", "q", "->", "r", ")"],
              left: {
                absurdity: false,
                data: ["~p"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["p"],
                  left: null,
                  middle: {
                    absurdity: false,
                    data: ["~r"],
                    left: null,
                    middle: {
                      absurdity: false,
                      data: ["q"],
                      left: null,
                      middle: {
                        absurdity: true,
                        data: [Array],
                        left: null,
                        middle: null,
                        orderNumber: 10,
                        originNumber: 5,
                        primitive: true,
                        right: null,
                        unpacked: false,
                      },
                      orderNumber: 9,
                      originNumber: 5,
                      primitive: true,
                      right: null,
                      unpacked: false,
                    },
                    orderNumber: 8,
                    originNumber: 4,
                    primitive: true,
                    right: null,
                    unpacked: false,
                  },
                  orderNumber: 7,
                  originNumber: 4,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              middle: null,
              orderNumber: 5,
              originNumber: 2,
              primitive: false,
              right: {
                absurdity: false,
                data: ["~q"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["p"],
                  left: null,
                  middle: {
                    absurdity: false,
                    data: ["~r"],
                    left: null,
                    middle: {
                      absurdity: false,
                      data: ["q"],
                      left: null,
                      middle: {
                        absurdity: true,
                        data: [Array],
                        left: null,
                        middle: null,
                        orderNumber: 10,
                        originNumber: 5,
                        primitive: true,
                        right: null,
                        unpacked: false,
                      },
                      orderNumber: 9,
                      originNumber: 5,
                      primitive: true,
                      right: null,
                      unpacked: false,
                    },
                    orderNumber: 8,
                    originNumber: 4,
                    primitive: true,
                    right: null,
                    unpacked: false,
                  },
                  orderNumber: 7,
                  originNumber: 4,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              unpacked: true,
            },
            orderNumber: 4,
            originNumber: 2,
            primitive: false,
            right: null,
            unpacked: true,
          },
          orderNumber: 3,
          originNumber: 1,
          primitive: false,
          right: null,
          unpacked: true,
        },
        middle: null,
        orderNumber: 2,
        originNumber: null,
        primitive: false,
        right: {
          absurdity: false,
          data: ["r"],
          left: null,
          middle: {
            absurdity: false,
            data: ["~", "(", "p", "->", "r", ")"],
            left: null,
            middle: {
              absurdity: false,
              data: ["~", "(", "q", "->", "r", ")"],
              left: null,
              middle: {
                absurdity: false,
                data: ["p"],
                left: null,
                middle: {
                  absurdity: false,
                  data: ["~r"],
                  left: null,
                  middle: {
                    absurdity: false,
                    data: ["q"],
                    left: null,
                    middle: {
                      absurdity: true,
                      data: ["~r"],
                      left: null,
                      middle: null,
                      orderNumber: 9,
                      originNumber: 5,
                      primitive: true,
                      right: null,
                      unpacked: false,
                    },
                    orderNumber: 8,
                    originNumber: 5,
                    primitive: true,
                    right: null,
                    unpacked: false,
                  },
                  orderNumber: 7,
                  originNumber: 4,
                  primitive: true,
                  right: null,
                  unpacked: false,
                },
                orderNumber: 6,
                originNumber: 4,
                primitive: true,
                right: null,
                unpacked: false,
              },
              orderNumber: 5,
              originNumber: 2,
              primitive: false,
              right: null,
              unpacked: true,
            },
            orderNumber: 4,
            originNumber: 2,
            primitive: false,
            right: null,
            unpacked: true,
          },
          orderNumber: 3,
          originNumber: 1,
          primitive: true,
          right: null,
          unpacked: false,
        },
        unpacked: true,
      },
      orderNumber: 1,
      originNumber: null,
      primitive: false,
      right: null,
      unpacked: true,
    };

    expect(
      constructTreeProof(["( p & q ) -> r"], "(p -> r) | ( q -> r )")
    ).toEqual(expected);
  });
  it("test 4 --destructuring test 3", () => {
    const expected = {
      absurdity: false,
      data: ["(", "p", "&", "q", ")", "->", "r"],
      left: null,
      middle: {
        absurdity: false,
        data: ["~", "(", "p", "->", "r", ")"],
        left: {
          absurdity: false,
          data: ["~", "(", "p", "&", "q", ")"],
          left: null,
          middle: {
            absurdity: false,
            data: ["p"],
            left: null,
            middle: {
              absurdity: false,
              data: ["~r"],
              left: {
                absurdity: true,
                data: ["~p"],
                left: null,
                middle: null,
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              middle: null,
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: {
                absurdity: false,
                data: ["~q"],
                left: null,
                middle: null,
                orderNumber: 6,
                originNumber: 3,
                primitive: true,
                right: null,
                unpacked: false,
              },
              unpacked: false,
            },
            orderNumber: 4,
            originNumber: 2,
            primitive: true,
            right: null,
            unpacked: false,
          },
          orderNumber: 3,
          originNumber: 1,
          primitive: false,
          right: null,
          unpacked: true,
        },
        middle: null,
        orderNumber: 2,
        originNumber: null,
        primitive: false,
        right: {
          absurdity: false,
          data: ["r"],
          left: null,
          middle: {
            absurdity: false,
            data: ["p"],
            left: null,
            middle: {
              absurdity: true,
              data: ["~r"],
              left: null,
              middle: null,
              orderNumber: 5,
              originNumber: 2,
              primitive: true,
              right: null,
              unpacked: false,
            },
            orderNumber: 4,
            originNumber: 2,
            primitive: true,
            right: null,
            unpacked: false,
          },
          orderNumber: 3,
          originNumber: 1,
          primitive: true,
          right: null,
          unpacked: false,
        },
        unpacked: true,
      },
      orderNumber: 1,
      originNumber: null,
      primitive: false,
      right: null,
      unpacked: true,
    };

    expect(constructTreeProof(["( p & q ) -> r"], "p -> r")).toEqual(expected);
  });
});

export {};
