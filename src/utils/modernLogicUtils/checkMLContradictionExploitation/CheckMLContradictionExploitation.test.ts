import { DerivedRules } from "../../../types/sharedTypes";
import { convertKBToDeductionSteps } from "../../helperFunctions/deductionHelperFunctions/deductionHelperFunctions";
import checkMLContradictionExploitation from "./CheckMLContradictionExploitation";

describe("checkMLContradictionExploitation", () => {
  const derivedRules: DerivedRules = {
    isDeMorganAllowed: false,
    isMaterialImpAllowed: false,
    isHypSyllAllowed: false,
    isCommutationAllowed: false,
  };
  it("test 1 -contradiction exists in the kb", () => {
    const deductionSteps = convertKBToDeductionSteps([["p"]]);
    const expected = [
      { from: 0, obtained: ["p"], rule: "premise" },
      { closed: true, from: null, obtained: ["p"], rule: null, show: true },
      {
        closed: null,
        from: null,
        obtained: ["~p"],
        rule: "AID",
        show: false,
        nonUsable: true,
      },
      {
        from: "0, 2",
        obtained: ["p", "&", "~p"],
        rule: "Conjunction",
        nonUsable: true,
      },
    ];

    expect(
      checkMLContradictionExploitation(["p"], deductionSteps, derivedRules)
    ).toEqual(expected);
  });

  it("test 2 --should not use the show statement as a side of the contradiction", () => {
    const deductionSteps = convertKBToDeductionSteps([]);

    expect(
      checkMLContradictionExploitation(["p"], deductionSteps, derivedRules)
    ).toEqual(false);
  });
});
