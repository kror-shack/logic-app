import { DeductionStep } from "../../../types/sharedTypes";
import checkForContradiction from "../../pLIndirectProofUtils/checkForContradiction/checkForContradiction";
import {
  addBracketsIfNecessary,
  addDeductionStep,
  getSearchIndexInDS,
  searchIndex,
  splitArray,
} from "../../helperFunctions/deductionHelperFunctions/deductionHelperFunctions";

/**
 * Check for contradiction within the knowledge base.
 *
 * This function checks the knowledge base against itself to see
 * whether a wff and its negation (P and ~P) both exist. If so,
 * it exploits this contradiction by using addition and disjunctive syllogism to reach the conclusion directly.
 *
 * @param conclusionArr - The conclusion string array that needs to be reached.
 * @param knowledgeBase  - The current knowledge base which the function modifies if applicable.
 * @param deductionStepsArr - The order of deduction steps which the function modifies if applicable.
 * @returns - True if a contradiction exits, otherwise false
 */
const checkForContradictionExploitaion = (
  conclusionArr: string[],
  previousDeductionStepsArr: DeductionStep[]
) => {
  const deductionStepsArr = [...previousDeductionStepsArr];
  const contradictionSteps = checkForContradiction(deductionStepsArr);
  if (contradictionSteps) {
    const [beforeConj, afterConj] = splitArray(
      contradictionSteps[contradictionSteps.length - 1].obtained,
      "&"
    );
    contradictionSteps.pop(); //remove the element

    const before = addBracketsIfNecessary(beforeConj);
    const after = addBracketsIfNecessary(afterConj);

    const bracketedConc = addBracketsIfNecessary(conclusionArr);
    const addToContradictionPremise = [...before, "|", ...bracketedConc];
    addDeductionStep(
      contradictionSteps,
      addToContradictionPremise,
      "Addition",
      `${getSearchIndexInDS(contradictionSteps, before)}`
    );

    addDeductionStep(
      contradictionSteps,
      conclusionArr,
      "Disjunctive Syllogism",
      `${getSearchIndexInDS(
        contradictionSteps,
        addToContradictionPremise
      )}, ${getSearchIndexInDS(contradictionSteps, afterConj)}`
    );
    return contradictionSteps;
  }
  return false;
};

export default checkForContradictionExploitaion;
