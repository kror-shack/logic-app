import { DeductionStep } from "../../../types/sharedTypes";
import checkForContradiction from "../../ContradictProofUtils/checkForContradiction/checkForContradiction";
import {
  addBracketsIfNecessary,
  addDeductionStep,
  searchIndex,
  splitArray,
} from "../../HelperFunctions/deductionHelperFunctions/deductionHelperFunctions";

const checkForContradictionExploitaion = (
  conclusionArr: string[],
  knowledgeBase: string[][],
  deductionStepsArr: DeductionStep[]
) => {
  if (checkForContradiction(knowledgeBase, deductionStepsArr)) {
    const [beforeConj, afterConj] = splitArray(
      knowledgeBase[knowledgeBase.length - 1],
      "&"
    );
    const before = addBracketsIfNecessary(beforeConj);
    const after = addBracketsIfNecessary(afterConj);
    const bracketedConc = addBracketsIfNecessary(conclusionArr);
    console.log(before);
    console.log(after);
    const addToContradictionPremise = [...before, "|", ...bracketedConc];
    addDeductionStep(
      deductionStepsArr,
      addToContradictionPremise,
      "Addition",
      `${searchIndex(knowledgeBase, before)}`
    );
    knowledgeBase.push(addToContradictionPremise);
    addDeductionStep(
      deductionStepsArr,
      conclusionArr,
      "Disjunctive Syllogism",
      `${searchIndex(knowledgeBase, addToContradictionPremise)}, ${searchIndex(
        knowledgeBase,
        after
      )}`
    );
    return true;
  } else return false;
};

export default checkForContradictionExploitaion;
