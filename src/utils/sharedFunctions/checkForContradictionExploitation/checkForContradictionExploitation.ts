import { DeductionStep } from "../../../types/sharedTypes";
import checkForContradiction from "../../PLIndirectProofUtils/checkForContradiction/checkForContradiction";
import {
  addBracketsIfNecessary,
  addDeductionStep,
  searchIndex,
  splitArray,
} from "../../HelperFunctions/deductionHelperFunctions/deductionHelperFunctions";

/**
 * Check for contradiction within the knowledge base.
 *
 * This function checks the knowledge base against itself to see
 * whether a wff and its negation (P and ~P) both exist. If so,
 * it exploits this contradiction by using addition and disjunctive syllogism to reach the conclusion directly.
 *
 * @param conclusionArr - The conclusion string array that needs to be reached.
 * @param knowledgeBase  - The current knowledge base which the function modifies if applicable.
 * @param deductionStepsArr - The order of deduction steps which the function modifies if applicable.
 * @returns - True if a contradiction exits, otherwise false
 */
const checkForContradictionExploitaion = (
  conclusionArr: string[],
  knowledgeBase: string[][],
  deductionStepsArr: DeductionStep[]
) => {
  if (checkForContradiction(knowledgeBase, deductionStepsArr)) {
    const [beforeConj, afterConj] = splitArray(
      knowledgeBase[knowledgeBase.length - 1],
      "&"
    );
    const before = addBracketsIfNecessary(beforeConj);
    const after = addBracketsIfNecessary(afterConj);
    const bracketedConc = addBracketsIfNecessary(conclusionArr);
    const addToContradictionPremise = [...before, "|", ...bracketedConc];
    addDeductionStep(
      deductionStepsArr,
      addToContradictionPremise,
      "Addition",
      `${searchIndex(knowledgeBase, before)}`
    );
    knowledgeBase.push(addToContradictionPremise);
    addDeductionStep(
      deductionStepsArr,
      conclusionArr,
      "Disjunctive Syllogism",
      `${searchIndex(knowledgeBase, addToContradictionPremise)}, ${searchIndex(
        knowledgeBase,
        after
      )}`
    );
    return true;
  } else return false;
};

export default checkForContradictionExploitaion;
