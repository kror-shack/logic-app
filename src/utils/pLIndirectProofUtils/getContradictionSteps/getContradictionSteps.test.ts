import getContradictionSteps from "./getContradictionSteps";

describe("getContradictionSteps", () => {
  it("test 1", () => {
    const expected = [
      {
        obtained: ["~Q"],
        rule: "Assuming the contradiction",
        from: "conc",
      },
      { obtained: ["Q"], rule: "Modus Ponens", from: "1,2" },
      { obtained: ["P", "&", "~Q"], rule: "Conjunction", from: "2,3" },
      {
        obtained: ["~", "(", "~P", "|", "Q", ")"],
        rule: "DeMorgan Theorem",
        from: "5",
      },
      {
        obtained: ["~", "(", "P", "->", "Q", ")"],
        rule: "Material Implication",
        from: "6",
      },
      {
        obtained: [
          "(",
          "P",
          "->",
          "Q",
          ")",
          "&",
          "~",
          "(",
          "P",
          "->",
          "Q",
          ")",
        ],
        rule: "Conjunction",
        from: "1,7",
      },
      {
        obtained: [
          "(",
          "P",
          "->",
          "Q",
          ")",
          "&",
          "~",
          "(",
          "P",
          "->",
          "Q",
          ")",
        ],
        rule: "-R Contradiction",
        from: "8",
      },
    ];
    expect(getContradictionSteps(["P->Q", "P"], "Q")).toEqual(expected);
  });

  it("test 2", () => {
    const expected = [
      {
        obtained: ["A"],
        rule: "Assuming the contradiction",
        from: "conc",
      },
      { obtained: ["B"], rule: "Modus Ponens", from: "1,3" },
      { obtained: ["~B"], rule: "Disjunctive Syllogism", from: "2,3" },
      { obtained: ["A", "&", "~B"], rule: "Conjunction", from: "3,5" },
      {
        obtained: ["~", "(", "~A", "|", "B", ")"],
        rule: "DeMorgan Theorem",
        from: "6",
      },
      {
        obtained: ["~", "(", "A", "->", "B", ")"],
        rule: "Material Implication",
        from: "7",
      },
      {
        obtained: [
          "(",
          "A",
          "->",
          "B",
          ")",
          "&",
          "~",
          "(",
          "A",
          "->",
          "B",
          ")",
        ],
        rule: "Conjunction",
        from: "1,8",
      },
      {
        obtained: [
          "(",
          "A",
          "->",
          "B",
          ")",
          "&",
          "~",
          "(",
          "A",
          "->",
          "B",
          ")",
        ],
        rule: "-R Contradiction",
        from: "9",
      },
    ];

    expect(getContradictionSteps(["A->B", "~A|~B"], "~A")).toEqual(expected);
  });
  it("test 3 report-id:JttrrCWAUsjj3tzQyuHV ", () => {
    const expected = [
      {
        obtained: ["(", "A", "&", "~C", ")", "|", "(", "C", "&", "~A", ")"],
        rule: "Assuming the contradiction",
        from: "conc",
      },
      { obtained: ["A"], rule: "Simplification", from: "1" },
      { obtained: ["~B"], rule: "Simplification", from: "1" },
      { obtained: ["C"], rule: "Modus Tollens", from: "2,6" },
      { obtained: ["~A", "|", "C"], rule: "Addition", from: "7" },
      {
        obtained: ["~", "(", "A", "&", "~C", ")"],
        rule: "DeMorgan Theorem",
        from: "8",
      },
      { obtained: ["~C", "|", "A"], rule: "Commutation", from: "8" },
      {
        obtained: ["~", "(", "C", "&", "~A", ")"],
        rule: "DeMorgan Theorem",
        from: "10",
      },
      {
        obtained: [
          "~",
          "(",
          "A",
          "&",
          "~C",
          ")",
          "&",
          "~",
          "(",
          "C",
          "&",
          "~A",
          ")",
        ],
        rule: "Conjunction",
        from: "9,11",
      },
      {
        obtained: [
          "~",
          "(",
          "(",
          "A",
          "&",
          "~C",
          ")",
          "|",
          "(",
          "C",
          "&",
          "~A",
          ")",
          ")",
        ],
        rule: "DeMorgan Theorem",
        from: "12",
      },
      {
        obtained: [
          "(",
          "(",
          "A",
          "&",
          "~C",
          ")",
          "|",
          "(",
          "C",
          "&",
          "~A",
          ")",
          ")",
          "&",
          "~",
          "(",
          "(",
          "A",
          "&",
          "~C",
          ")",
          "|",
          "(",
          "C",
          "&",
          "~A",
          ")",
          ")",
        ],
        rule: "Conjunction",
        from: "4,13",
      },
      {
        obtained: [
          "(",
          "(",
          "A",
          "&",
          "~C",
          ")",
          "|",
          "(",
          "C",
          "&",
          "~A",
          ")",
          ")",
          "&",
          "~",
          "(",
          "(",
          "A",
          "&",
          "~C",
          ")",
          "|",
          "(",
          "C",
          "&",
          "~A",
          ")",
          ")",
        ],
        rule: "-R Contradiction",
        from: "14",
      },
    ];
    expect(getContradictionSteps(["A&~B", "~C->B", "~A->~C"], "A<->C")).toEqual(
      expected
    );
  });
  it("test 4  report-id:fHL91EbSAJGh8Rhfipun", () => {
    const expected = [
      {
        obtained: ["~N", "|", "(", "A", "|", "R", ")"],
        rule: "Assuming the contradiction",
        from: "conc",
      },
      {
        obtained: ["~A", "&", "~C"],
        rule: "DeMorgan Theorem",
        from: "1",
      },
      {
        obtained: ["(", "~R", "->", "~A", ")", "&", "(", "~A", "->", "~R", ")"],
        rule: "Biconditional Elimination",
        from: "2",
      },
      {
        obtained: ["(", "~N", "->", "C", ")", "&", "(", "C", "->", "~N", ")"],
        rule: "Biconditional Elimination",
        from: "3",
      },
      { obtained: ["~A"], rule: "Simplification", from: "5" },
      { obtained: ["~C"], rule: "Simplification", from: "5" },
      { obtained: ["~R", "->", "~A"], rule: "Simplification", from: "6" },
      { obtained: ["~A", "->", "~R"], rule: "Simplification", from: "6" },
      { obtained: ["~N", "->", "C"], rule: "Simplification", from: "7" },
      { obtained: ["C", "->", "~N"], rule: "Simplification", from: "7" },
      { obtained: ["~R"], rule: "Modus Ponens", from: "11,8" },
      { obtained: ["N"], rule: "Modus Tollens", from: "12,9" },
      { obtained: ["~A", "&", "~R"], rule: "Conjunction", from: "8,14" },
      {
        obtained: ["~", "(", "A", "|", "R", ")"],
        rule: "DeMorgan Theorem",
        from: "16",
      },
      {
        obtained: ["N", "&", "~", "(", "A", "|", "R", ")"],
        rule: "Conjunction",
        from: "15,17",
      },
      {
        obtained: ["~", "(", "~N", "|", "(", "A", "|", "R", ")", ")"],
        rule: "DeMorgan Theorem",
        from: "18",
      },
      {
        obtained: [
          "(",
          "~N",
          "|",
          "(",
          "A",
          "|",
          "R",
          ")",
          ")",
          "&",
          "~",
          "(",
          "~N",
          "|",
          "(",
          "A",
          "|",
          "R",
          ")",
          ")",
        ],
        rule: "Conjunction",
        from: "4,19",
      },
      {
        obtained: [
          "(",
          "~N",
          "|",
          "(",
          "A",
          "|",
          "R",
          ")",
          ")",
          "&",
          "~",
          "(",
          "~N",
          "|",
          "(",
          "A",
          "|",
          "R",
          ")",
          ")",
        ],
        rule: "-R Contradiction",
        from: "20",
      },
    ];

    expect(
      getContradictionSteps(
        ["~(A|C)", "~R <-> ~A", "Â¬N <-> C"],
        "N & ~(A | R) "
      )
    ).toEqual(expected);
  });
});
